import org.jlleitschuh.gradle.ktlint.ReporterType

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

check.dependsOn 'checkstyle', 'findbugs'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "jp.co.charco.dangerexample"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


ktlint {
    version = "0.22.0"
    debug = true
    verbose = true
    android = true
    reporter = ReporterType.CHECKSTYLE
    ignoreFailures = true
}

checkstyle {
    toolVersion '8.11'
    configFile file("${project.rootDir}/config/quality/checkstyle.xml")
    reportsDir = file("${project.buildDir}/reports/checkstyle")
    showViolations = true
    ignoreFailures = true
}
task checkstyle(type: Checkstyle) {
    group = 'verification'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**', '**/test/**'

    reports {
        xml.enabled = true
        html.enabled = true
    }
    classpath = files(file("${project.buildDir}/intermediates/javac"))
}

findbugs {
    toolVersion = "3.0.1" // java8
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("$rootProject.projectDir/config/quality/findbugs-filter.xml")
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    group 'verification'

    reports {
        xml.enabled = true
        html.enabled = false
    }

    include '**/*.java'

    classes = files("build/intermediates/javac/")
    source 'src/main'
    classpath = files()
}

